@page "/documentation"
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime jsRuntime
@inject NavigationManager _navigationManager
@using OCA.Website.Components;
@using OCA.Website.Helpers;
@using OCA.Website.Models;
@using System.Reflection;
@using System.Text;
@using System.Collections;

<PageTitle>Home</PageTitle>
<div class="d-flex align-items-center flex-column pt-12">
    <div>
        <h2 class="header-typography">OpenCryptAPI Documentation.</h2>
    </div>
    <div class="d-flex flex-row pt-12 align-content-around flex-grow-1">
        <div class="mr-4">
            <button type="button" @onclick="OpenDialog" href="#" class="css-button-sliding-to-left--rose">Get your API key now</button>
        </div>
        <div class="ml-4">
            <button type="button" @onclick="@(() => Redirect("cryptocurrencies"))" href="/cryptocurrencies" class="css-button-sliding-to-left--rose">View our data</button>
        </div>
    </div>
    <div class="pt-16">
        <span class="line-divider-solid white-text"></span>
    </div>
    <div class="pt-16">
        <h2 class="header-typography">How to use the API</h2>
    </div>
    <MudExpansionPanels Class="pt-6" MultiExpansion="true" style="min-width: 34rem;">
        <MudExpansionPanel>
            <TitleContent>
                <div class="d-flex gap-4">
                    <MudChip Icon="@Icons.Material.Filled.Bolt" Color="Color.Secondary">GET</MudChip>
                    <MudText Class="pt-2"> Top 100 <strong>cryptocurrencies</strong></MudText>
                </div>
            </TitleContent>
            <ChildContent>
                <div class="d-flex gap-10 ml-2">
                    <MudText Class="pt-2" Align="Align.Left"><b>GET</b></MudText>
                    <MudText Class="pt-2" Align="Align.Left">@_top100CryptosRequestUri.AbsolutePath </MudText>
                    <MudTooltip Text="@(_copied ? "Success" : "Copy to clipboard")">
                        <MudIconButton Color="Color.Secondary" Icon="@(!_copied ? Icons.Material.Filled.ContentCopy : Icons.Material.Filled.Check)" Disabled="_copied" OnClick="@(() => CopyTextToClipboard(_top100CryptosRequestUri.AbsolutePath))" aria-label="copy-to-clipboard"></MudIconButton>
                    </MudTooltip>
                </div>
            </ChildContent>
        </MudExpansionPanel>
        <MudExpansionPanel Class="pt-4">
            <TitleContent>
                <div class="d-flex gap-4">
                    <MudChip Icon="@Icons.Material.Filled.Bolt" Color="Color.Secondary">GET</MudChip>
                    <MudText Class="pt-2"> Cryptocurrencies by <strong>rank</strong></MudText>
                </div>
            </TitleContent>
            <ChildContent>
                <div class="d-flex gap-10 ml-2">
                    <MudText Class="pt-2" Align="Align.Left"><b>GET</b></MudText>
                    <MudText Class="pt-2" Align="Align.Left">@_cryptosByRankRequestUri.AbsolutePath</MudText>
                    <MudTooltip Text="@(_copied ? "Success" : "Copy to clipboard")">
                        <MudIconButton Color="Color.Secondary" Icon="@(!_copied ? Icons.Material.Filled.ContentCopy : Icons.Material.Filled.Check)" Disabled="_copied" OnClick="@(() => CopyTextToClipboard(_cryptosByRankRequestUri.AbsolutePath))" aria-label="copy-to-clipboard"></MudIconButton>
                    </MudTooltip>
                </div>                
            </ChildContent>
        </MudExpansionPanel>
    </MudExpansionPanels>
    <div class="pt-6">
        <span class="line-divider-solid white-text"></span>
    </div>
    <div class="pt-6">
        <h2 class="header-typography">Response structure</h2>
    </div>
    <div class="pt-8">
        @((MarkupString)_responseObjectJson)
    </div>
</div>

@code {
    private bool _copyingToClipboard = false;
    private bool _copied = false;
    private string _responseObjectJson = string.Empty;

    private Uri _top100CryptosRequestUri = new Uri("https://get-all-crpyptos/your-api-key/get/all");
    private Uri _cryptosByRankRequestUri = new Uri("https://get-all-crpyptos/your-api-key/get/rank");

    protected override void OnInitialized()
    {
        _responseObjectJson = ReturnJsonStructure(typeof(ApiResponse));
    }

    private void OpenDialog()
    {
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };

        IDialogReference myDialogReference = DialogService.Show<ApiKeyCreater>("Create Api Key", closeOnEscapeKey);
    }

    private async Task CopyTextToClipboard(string text)
    {
        _copyingToClipboard = true;
        await jsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
        _copyingToClipboard = false;
        _copied = true;
        StateHasChanged();
    }

    private void Redirect(string page)
    {
        _navigationManager.NavigateTo(page);
    }

    private static string ReturnJsonStructure(Type type)
    {
        PropertyInfo[] modelProperties = type.GetProperties();
        StringBuilder stringBuilder = new();
        stringBuilder.AppendLine("<ul>");

        foreach(PropertyInfo property in modelProperties)
        {
            if(IsEnumerable(property))
            {
                Type? genericArgumentType = GetCollectionType(property.PropertyType);
                if (genericArgumentType is not null)
                {
                    stringBuilder.AppendLine($"<li>{genericArgumentType.Name}[]:");
                    stringBuilder.Append(ReturnJsonStructure(genericArgumentType));
                    stringBuilder.AppendLine($"</li>");
                    continue;
                }
            }
            if(property.PropertyType.IsClass && property.PropertyType != typeof(string))
            {
                stringBuilder.AppendLine($"<li>{property.PropertyType.Name}:");
                stringBuilder.AppendLine(ReturnJsonStructure(property.PropertyType));
                stringBuilder.AppendLine($"</li>");
                continue;
            }
            stringBuilder.AppendLine($"<li>{property.Name}: {property.PropertyType.Name}</li>");
        }
        stringBuilder.AppendLine("</ul>");
        return stringBuilder.ToString();
    }

    private static bool IsEnumerable(PropertyInfo pi)
    {
        return typeof(IEnumerable).IsAssignableFrom(pi.PropertyType) && pi.PropertyType != typeof(string);
    }

    private static Type? GetCollectionType(Type collectionType)
    {
        return CustomTypeExtensions.GetAnyElementType(collectionType);
    }
}



